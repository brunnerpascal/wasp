// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class DepositCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncDeposit);
	params: sc.MutableDepositParams = new sc.MutableDepositParams();
}

export class DepositContext {
	params: sc.ImmutableDepositParams = new sc.ImmutableDepositParams();
	state: sc.MutablefaucetState = new sc.MutablefaucetState();
}

export class InitCall {
	func: wasmlib.ScInitFunc = new wasmlib.ScInitFunc(sc.HScName, sc.HFuncInit);
	params: sc.MutableInitParams = new sc.MutableInitParams();
}

export class InitContext {
	params: sc.ImmutableInitParams = new sc.ImmutableInitParams();
	state: sc.MutablefaucetState = new sc.MutablefaucetState();
}

export class RequestTokenCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncRequestToken);
	params: sc.MutableRequestTokenParams = new sc.MutableRequestTokenParams();
}

export class RequestTokenContext {
	params: sc.ImmutableRequestTokenParams = new sc.ImmutableRequestTokenParams();
	state: sc.MutablefaucetState = new sc.MutablefaucetState();
}

export class SetOwnerCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetOwner);
	params: sc.MutableSetOwnerParams = new sc.MutableSetOwnerParams();
}

export class SetOwnerContext {
	params: sc.ImmutableSetOwnerParams = new sc.ImmutableSetOwnerParams();
	state: sc.MutablefaucetState = new sc.MutablefaucetState();
}

export class GetMaxTokenAmountCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetMaxTokenAmount);
	results: sc.ImmutableGetMaxTokenAmountResults = new sc.ImmutableGetMaxTokenAmountResults();
}

export class GetMaxTokenAmountContext {
	results: sc.MutableGetMaxTokenAmountResults = new sc.MutableGetMaxTokenAmountResults();
	state: sc.ImmutablefaucetState = new sc.ImmutablefaucetState();
}

export class GetMaxTokenRequestsCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetMaxTokenRequests);
	results: sc.ImmutableGetMaxTokenRequestsResults = new sc.ImmutableGetMaxTokenRequestsResults();
}

export class GetMaxTokenRequestsContext {
	results: sc.MutableGetMaxTokenRequestsResults = new sc.MutableGetMaxTokenRequestsResults();
	state: sc.ImmutablefaucetState = new sc.ImmutablefaucetState();
}

export class ScFuncs {
    static deposit(ctx: wasmlib.ScFuncCallContext): DepositCall {
        let f = new DepositCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static init(ctx: wasmlib.ScFuncCallContext): InitCall {
        let f = new InitCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static requestToken(ctx: wasmlib.ScFuncCallContext): RequestTokenCall {
        let f = new RequestTokenCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static setOwner(ctx: wasmlib.ScFuncCallContext): SetOwnerCall {
        let f = new SetOwnerCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static getMaxTokenAmount(ctx: wasmlib.ScViewCallContext): GetMaxTokenAmountCall {
        let f = new GetMaxTokenAmountCall();
        f.func.setPtrs(null, f.results);
        return f;
    }

    static getMaxTokenRequests(ctx: wasmlib.ScViewCallContext): GetMaxTokenRequestsCall {
        let f = new GetMaxTokenRequestsCall();
        f.func.setPtrs(null, f.results);
        return f;
    }
}
